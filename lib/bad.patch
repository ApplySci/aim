Subject: [PATCH] we need to be able to purge our notification subscriptions
I think we've solved most of the notifications problem. TODO Still need to do a proper reset on first run with an empty topic preferences. And needs testing on Apple
---
Index: lib/providers/fcm.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/providers/fcm.dart b/lib/providers/fcm.dart
--- a/lib/providers/fcm.dart	(revision 2a18cb155729e5ee2c0f6ac43ccb33df34447cc9)
+++ b/lib/providers/fcm.dart	(revision 31ec3afb5d2ca22d45a05dcf5c4c695bf509161e)
@@ -118,14 +118,13 @@
     final prefs = await SharedPreferences.getInstance();
     final topics = prefs.getString('fcm_topics');
 
-    // If no topics record exists (not even empty list), delete token to force fresh start
+    // If no topics record exists (not even empty list), reset notifications
     // this ensures that for those app users who subscribed to any topics previously,
     // will have their subscriptions emptied. When they select a new tournament,
     // they will build a list of subscribed topics that we can then maintain properly.
-
     if (topics == null) {
-      Log.debug('No FCM topics record found, deleting token');
-      await FirebaseMessaging.instance.deleteToken();
+      Log.debug('No FCM topics record found, but will handle this in migration');
+      return;
     }
 
     await FirebaseMessaging.instance.requestPermission(
Index: lib/services/notification_preferences.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/services/notification_preferences.dart b/lib/services/notification_preferences.dart
--- a/lib/services/notification_preferences.dart	(revision 2a18cb155729e5ee2c0f6ac43ccb33df34447cc9)
+++ b/lib/services/notification_preferences.dart	(revision 0c59f249ba6c2f48f0667a05bd65ff07b9ce161d)
@@ -1,4 +1,7 @@
 import 'package:flutter_riverpod/flutter_riverpod.dart';
+import 'package:firebase_app_installations/firebase_app_installations.dart';
+import 'package:restart_app/restart_app.dart';
+
 import '/providers.dart';
 import '/utils.dart';
 
@@ -25,7 +28,8 @@
     // Only update if values actually changed
     if (currentNotifications != choice.wantsNotifications) {
       Log.debug('setting notificationsPrefProvider');
-      await ref.read(notificationsPrefProvider.notifier).set(choice.wantsNotifications);
+      await ref.read(notificationsPrefProvider.notifier).set(
+          choice.wantsNotifications);
     }
 
     if (currentAlarms != choice.wantsAlarms) {
@@ -85,18 +89,47 @@
   }
 
   Future<void> resetNotifications() async {
-    // Turn off notifications preference
-    await ref.read(notificationsPrefProvider.notifier).set(false);
-
-    // Unsubscribe from all topics
     await unsubscribeFromAllTopics();
 
-    // Delete FCM token to force new token generation
+    // Delete FCM token
     final fcm = ref.read(fcmProvider);
     await fcm.deleteToken();
 
-    // Get new FCM token by re-initializing Firebase Messaging
-    await initFirebaseMessaging();
+    // Delete Firebase instance, forcing creation of a new FID, to
+    // properly wipe out all old topic subscriptions
+    FirebaseInstallations.instance.delete();
+
+    Restart.restartApp(
+      // Customizing the restart notification message (only needed on iOS)
+      notificationTitle: 'Restarting the World Riichi App',
+      notificationBody: 'Please tap here to open the app again.',
+    );
+
+    /*
+    https://pub.dev/packages/restart_app
+
+    Add the following to the project /ios/Runner/Info.plist file.
+    This will allow the app to send local notifications.
+    Replace PRODUCT_BUNDLE_IDENTIFIER and example with your actual bundle identifier and URL scheme:
+
+<key>CFBundleURLTypes</key>
+<array>
+  <dict>
+    <key>CFBundleTypeRole</key>
+    <string>Editor</string>
+    <key>CFBundleURLName</key>
+	<!-- You can find it on /ios/project.pbxproj - 'PRODUCT_BUNDLE_IDENTIFIER' -->
+    <string>[Your project PRODUCT_BUNDLE_IDENTIFIER value]</string>
+    <key>CFBundleURLSchemes</key>
+    <array>
+      <!-- Your app title -->
+      <string>example</string>
+    </array>
+  </dict>
+</array>
+
+*/
+
   }
 }
 
Index: lib/views/settings_dialog.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/views/settings_dialog.dart b/lib/views/settings_dialog.dart
--- a/lib/views/settings_dialog.dart	(revision 2a18cb155729e5ee2c0f6ac43ccb33df34447cc9)
+++ b/lib/views/settings_dialog.dart	(revision 31ec3afb5d2ca22d45a05dcf5c4c695bf509161e)
@@ -4,6 +4,7 @@
 
 import '/providers.dart';
 import '/services/notification_preferences.dart';
+import 'loading_overlay.dart';
 
 class SettingsDialog extends ConsumerWidget {
   const SettingsDialog({super.key});
@@ -100,25 +101,50 @@
                   .read(timezonePrefProvider.notifier)
                   .set(value),
             ),
-            const SizedBox(height: 20),
-            OutlinedButton(
-              onPressed: () async {
-                final service = ref.read(notificationPreferencesProvider);
-                await service.resetNotifications();
-
-                if (context.mounted) {
-                  ScaffoldMessenger.of(context).showSnackBar(
-                    const SnackBar(
-                      content: Text('Notifications are off, until you turn them on again.'),
-                    ),
-                  );
-                }
-              },
-              child: const Padding(
-                padding: EdgeInsets.symmetric(vertical: 8.0),
-                child: Text('Reset All Notification Settings'),
+            const SizedBox(height: 96),
+            Padding(
+              padding: const EdgeInsets.symmetric(horizontal: 16.0),
+              child: OutlinedButton.icon(
+                style: OutlinedButton.styleFrom(
+                  foregroundColor: Colors.red,
+                  side: const BorderSide(color: Colors.red),
+                ),
+                icon: const Icon(Icons.warning),
+                onPressed: () async {
+                  OverlayEntry? overlayEntry;
+
+                  try {
+                    overlayEntry = OverlayEntry(
+                      builder: (context) => Container(
+                        color: Colors.black54,
+                        child: const LoadingOverlay(
+                          message: 'Resetting notification settings...',
+                        ),
+                      ),
+                    );
+                    Overlay.of(context).insert(overlayEntry);
+
+                    final service = ref.read(notificationPreferencesProvider);
+                    await service.resetNotifications();
+                  } catch (e) {
+                    overlayEntry?.remove();
+                    if (context.mounted) {
+                      Navigator.of(context).pop(); // Dismiss settings dialog
+                      ScaffoldMessenger.of(context).showSnackBar(
+                        SnackBar(
+                          content: Text('Error resetting notifications: $e'),
+                        ),
+                      );
+                    }
+                  }
+                },
+                label: const Padding(
+                  padding: EdgeInsets.symmetric(vertical: 8.0),
+                  child: Text('Reset All Notification Settings (restarts the app)'),
+                ),
               ),
             ),
+            const SizedBox(height: 20),
           ],
         ),
       ),
Index: macos/Flutter/GeneratedPluginRegistrant.swift
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/macos/Flutter/GeneratedPluginRegistrant.swift b/macos/Flutter/GeneratedPluginRegistrant.swift
--- a/macos/Flutter/GeneratedPluginRegistrant.swift	(revision 2a18cb155729e5ee2c0f6ac43ccb33df34447cc9)
+++ b/macos/Flutter/GeneratedPluginRegistrant.swift	(revision 0c59f249ba6c2f48f0667a05bd65ff07b9ce161d)
@@ -6,6 +6,7 @@
 import Foundation
 
 import cloud_firestore
+import firebase_app_installations
 import firebase_core
 import firebase_messaging
 import flutter_timezone
@@ -16,6 +17,7 @@
 
 func RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {
   FLTFirebaseFirestorePlugin.register(with: registry.registrar(forPlugin: "FLTFirebaseFirestorePlugin"))
+  FirebaseInstallationsPlugin.register(with: registry.registrar(forPlugin: "FirebaseInstallationsPlugin"))
   FLTFirebaseCorePlugin.register(with: registry.registrar(forPlugin: "FLTFirebaseCorePlugin"))
   FLTFirebaseMessagingPlugin.register(with: registry.registrar(forPlugin: "FLTFirebaseMessagingPlugin"))
   FlutterTimezonePlugin.register(with: registry.registrar(forPlugin: "FlutterTimezonePlugin"))
Index: pubspec.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pubspec.lock b/pubspec.lock
--- a/pubspec.lock	(revision 2a18cb155729e5ee2c0f6ac43ccb33df34447cc9)
+++ b/pubspec.lock	(revision 0c59f249ba6c2f48f0667a05bd65ff07b9ce161d)
@@ -5,10 +5,10 @@
     dependency: transitive
     description:
       name: _flutterfire_internals
-      sha256: "27899c95f9e7ec06c8310e6e0eac967707714b9f1450c4a58fa00ca011a4a8ae"
+      sha256: e4f2a7ef31b0ab2c89d2bde35ef3e6e6aff1dce5e66069c6540b0e9cfe33ee6b
       url: "https://pub.dev"
     source: hosted
-    version: "1.3.49"
+    version: "1.3.50"
   alarm:
     dependency: "direct main"
     description:
@@ -193,14 +193,38 @@
       url: "https://pub.dev"
     source: hosted
     version: "7.0.1"
+  firebase_app_installations:
+    dependency: "direct main"
+    description:
+      name: firebase_app_installations
+      sha256: f30081592a258f69080297e8f8070ae1fbed121a70db396d57023546fe98fe59
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.3.2+1"
+  firebase_app_installations_platform_interface:
+    dependency: transitive
+    description:
+      name: firebase_app_installations_platform_interface
+      sha256: cde086a58766b1669e4a4f02bc29fde5bbec414945a73e062803fdb05f779daf
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.1.4+49"
+  firebase_app_installations_web:
+    dependency: transitive
+    description:
+      name: firebase_app_installations_web
+      sha256: ec977483fab7aae69faf3c7bf9dcd72cc3b25f7ee5fffdeb0c52f3e597be0368
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.1.6+7"
   firebase_core:
     dependency: "direct main"
     description:
       name: firebase_core
-      sha256: "0307c1fde82e2b8b97e0be2dab93612aff9a72f31ebe9bfac66ed8b37ef7c568"
+      sha256: d851c1ca98fd5a4c07c747f8c65dacc2edd84a4d9ac055d32a5f0342529069f5
       url: "https://pub.dev"
     source: hosted
-    version: "3.10.0"
+    version: "3.10.1"
   firebase_core_platform_interface:
     dependency: transitive
     description:
@@ -680,6 +704,14 @@
       url: "https://pub.dev"
     source: hosted
     version: "6.0.1"
+  restart_app:
+    dependency: "direct main"
+    description:
+      name: restart_app
+      sha256: "00d5ec3e9de871cedbe552fc41e615b042b5ec654385e090e0983f6d02f655ed"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.3.2"
   riverpod:
     dependency: transitive
     description:
Index: pubspec.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pubspec.yaml b/pubspec.yaml
--- a/pubspec.yaml	(revision 2a18cb155729e5ee2c0f6ac43ccb33df34447cc9)
+++ b/pubspec.yaml	(revision 0c59f249ba6c2f48f0667a05bd65ff07b9ce161d)
@@ -30,6 +30,7 @@
   collection: ^1.18.0
   data_table_2: ^2.5.17
   equatable: ^2.0.7
+  firebase_app_installations: ^0.3.2+1
   firebase_core: ^3.10.0
   firebase_messaging: ^15.2.0
   flutter_autostart: ^0.0.2
@@ -42,6 +43,7 @@
   http: ^1.2.2
   intl: ^0.19.0
   permission_handler: ^11.3.1
+  restart_app: ^1.3.2
   shared_preferences: ^2.3.5
   syncfusion_flutter_charts: ^28.1.38
   timezone: ^0.10.0
Index: lib/main.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/main.dart b/lib/main.dart
--- a/lib/main.dart	(revision 2b2c31d65ba31500750615ab98becdeaa74c90bb)
+++ b/lib/main.dart	(revision 31ec3afb5d2ca22d45a05dcf5c4c695bf509161e)
@@ -10,9 +10,12 @@
 import 'package:permission_handler/permission_handler.dart';
 import 'package:shared_preferences/shared_preferences.dart';
 import 'package:timezone/data/latest_10y.dart';
+import 'package:firebase_core/firebase_core.dart';
 
+import 'firebase_options.dart';
 import 'models.dart';
 import 'providers.dart';
+import 'providers/migration.dart';
 import 'services/notification_preferences.dart';
 import 'utils.dart';
 import 'views/alarm_page.dart';
@@ -28,9 +31,9 @@
 
   // Initialize Firebase core before anything else
   try {
-    // and initialize messaging
-    await initFirebaseMessaging();
-
+    await Firebase.initializeApp(
+      options: DefaultFirebaseOptions.currentPlatform,
+    );
   } catch (e, stack) {
     Log.debug('Firebase initialization error: $e');
     Log.debug('Stack trace: $stack');
@@ -67,9 +70,12 @@
 }
 
 class _MyApp extends ConsumerWidget {
-
   @override
-  Widget build(context, ref) {
+  Widget build(BuildContext context, WidgetRef ref) {
+    // Check migration on first build
+    WidgetsBinding.instance.addPostFrameCallback((_) {
+      ref.read(migrationProvider).checkMigration(context);
+    });
 
     final fcm = ref.watch(fcmProvider);
 
Index: lib/providers.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/providers.dart b/lib/providers.dart
--- a/lib/providers.dart	(revision 2b2c31d65ba31500750615ab98becdeaa74c90bb)
+++ b/lib/providers.dart	(revision 31ec3afb5d2ca22d45a05dcf5c4c695bf509161e)
@@ -5,7 +5,6 @@
 import 'providers/firestore.dart';
 import 'providers/location.dart';
 import 'providers/shared_preferences.dart';
-import '/utils.dart';
 
 export 'providers/fcm.dart';
 export 'providers/firestore.dart';
Index: lib/providers/migration.dart
===================================================================
diff --git a/lib/providers/migration.dart b/lib/providers/migration.dart
new file mode 100644
--- /dev/null	(revision 31ec3afb5d2ca22d45a05dcf5c4c695bf509161e)
+++ b/lib/providers/migration.dart	(revision 31ec3afb5d2ca22d45a05dcf5c4c695bf509161e)
@@ -0,0 +1,45 @@
+import 'package:flutter_riverpod/flutter_riverpod.dart';
+import 'package:flutter/material.dart';
+import '/services/notification_preferences.dart';
+import '/providers.dart';
+
+const currentAppVersion = '1.0.0'; // Update this with your actual version
+
+final migrationProvider = Provider((ref) => MigrationService(ref));
+
+class MigrationService {
+  final Ref ref;
+
+  MigrationService(this.ref);
+
+  Future<void> checkMigration(BuildContext context) async {
+    final storedVersion = ref.read(appVersionProvider);
+    final hasLegacyPrefs = ref.read(hasLegacyPreferencesProvider);
+
+    // If we have legacy prefs, but no version number, reset FCM notifications
+    if (hasLegacyPrefs && storedVersion == "0.0.0") {
+      await showDialog<bool>(
+        context: context,
+        barrierDismissible: false,
+        builder: (context) => AlertDialog(
+          title: const Text('App Update'),
+          content: const Text(
+            'The app needs to reset notification settings.'
+            'We need to restart.'
+          ),
+          actions: [
+            FilledButton(
+              onPressed: () => Navigator.pop(context, true),
+              child: const Text('OK'),
+            ),
+          ],
+        ),
+      );
+
+      // Update stored version
+      await ref.read(appVersionProvider.notifier).set(currentAppVersion);
+      final service = ref.read(notificationPreferencesProvider);
+      await service.resetNotifications();
+    }
+  }
+}
Index: lib/providers/shared_preferences.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/providers/shared_preferences.dart b/lib/providers/shared_preferences.dart
--- a/lib/providers/shared_preferences.dart	(revision 2b2c31d65ba31500750615ab98becdeaa74c90bb)
+++ b/lib/providers/shared_preferences.dart	(revision 31ec3afb5d2ca22d45a05dcf5c4c695bf509161e)
@@ -319,3 +319,19 @@
 final notificationsPrefProvider = NotifierProvider<SharedPreferencesBoolNotifier, bool>(
   () => SharedPreferencesBoolNotifier(key: 'notifications', fallback: true),
 );
+
+final appVersionProvider = NotifierProvider<SharedPreferencesStringNotifier, String>(
+  () => SharedPreferencesStringNotifier(
+    key: 'app_version',
+    fallback: '0.0.0', // This ensures we'll detect first run of new version
+  ),
+);
+
+final hasLegacyPreferencesProvider = Provider<bool>((ref) {
+  final prefs = ref.watch(sharedPreferencesProvider);
+  // Check for any old preferences that would indicate a previous install
+  return prefs.getKeys().any((key) => 
+    key != 'app_version' && 
+    !key.startsWith('flutter.')  // Skip Flutter's internal preferences
+  );
+});
Index: lib/views/loading_overlay.dart
===================================================================
diff --git a/lib/views/loading_overlay.dart b/lib/views/loading_overlay.dart
new file mode 100644
--- /dev/null	(revision 31ec3afb5d2ca22d45a05dcf5c4c695bf509161e)
+++ b/lib/views/loading_overlay.dart	(revision 31ec3afb5d2ca22d45a05dcf5c4c695bf509161e)
@@ -0,0 +1,40 @@
+import 'package:flutter/material.dart';
+
+class LoadingOverlay extends StatelessWidget {
+  const LoadingOverlay({
+    this.message = 'Loading...',
+    super.key,
+  });
+
+  final String message;
+
+  static Future<void> show(BuildContext context, {String? message}) {
+    return showDialog(
+      context: context,
+      barrierDismissible: false,
+      builder: (context) => PopScope(
+        canPop: false,
+        child: LoadingOverlay(message: message ?? 'Loading...'),
+      ),
+    );
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return Center(
+      child: Card(
+        child: Padding(
+          padding: const EdgeInsets.all(16.0),
+          child: Column(
+            mainAxisSize: MainAxisSize.min,
+            children: [
+              const CircularProgressIndicator(),
+              const SizedBox(height: 16),
+              Text(message),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+} 
\ No newline at end of file
Index: lib/views/tournament_list_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/views/tournament_list_page.dart b/lib/views/tournament_list_page.dart
--- a/lib/views/tournament_list_page.dart	(revision 2b2c31d65ba31500750615ab98becdeaa74c90bb)
+++ b/lib/views/tournament_list_page.dart	(revision 31ec3afb5d2ca22d45a05dcf5c4c695bf509161e)
@@ -11,6 +11,7 @@
 import '/utils.dart';
 import '/views/error_view.dart';
 import '/views/settings_dialog.dart';
+import '/views/loading_overlay.dart';
 
 class TournamentListPage extends ConsumerWidget {
   const TournamentListPage({super.key});
@@ -183,22 +184,80 @@
         ),
       );
 
-      // Handle the case where choice is null (dialog was dismissed)
       if (choice == null) return;
 
-      // Set the tournament ID first to ensure proper state
-      await ref.read(tournamentIdProvider.notifier).set(tournament.id);
-      
-      // Then update notification preferences
-      final service = ref.read(notificationPreferencesProvider);
-      await service.updatePreferences(choice);
+      if (!context.mounted) return;
+
+      OverlayEntry? overlayEntry;
+
+      try {
+        overlayEntry = OverlayEntry(
+          builder: (context) => Container(
+            color: Colors.black54,
+            child: const LoadingOverlay(
+              message: 'Loading tournament data...',
+            ),
+          ),
+        );
+        Overlay.of(context).insert(overlayEntry);
+
+        await ref.read(tournamentIdProvider.notifier).set(tournament.id);
+        final service = ref.read(notificationPreferencesProvider);
+        await service.updatePreferences(choice);
+
+        if (!context.mounted) {
+          overlayEntry.remove();
+          return;
+        }
+
+        overlayEntry.remove();
+        overlayEntry = null;
+
+        await Navigator.of(context).pushReplacementNamed(ROUTES.tournament);
+      } catch (e) {
+        overlayEntry?.remove();
+        if (context.mounted) {
+          ScaffoldMessenger.of(context).showSnackBar(
+            SnackBar(content: Text('Error loading tournament: $e')),
+          );
+        }
+      }
     } else {
-      // For past tournaments, just set the ID
-      await ref.read(tournamentIdProvider.notifier).set(tournament.id);
-    }
+      if (!context.mounted) return;
+
+      OverlayEntry? overlayEntry;
+
+      try {
+        overlayEntry = OverlayEntry(
+          builder: (context) => Container(
+            color: Colors.black54,
+            child: const LoadingOverlay(
+              message: 'Loading tournament data...',
+            ),
+          ),
+        );
+        Overlay.of(context).insert(overlayEntry);
+
+        await ref.read(tournamentIdProvider.notifier).set(tournament.id);
+
+        if (!context.mounted) {
+          overlayEntry.remove();
+          return;
+        }
 
-    if (!context.mounted) return;
-    Navigator.of(context).pushReplacementNamed(ROUTES.tournament);
+        overlayEntry.remove();
+        overlayEntry = null;
+
+        await Navigator.of(context).pushReplacementNamed(ROUTES.tournament);
+      } catch (e) {
+        overlayEntry?.remove();
+        if (context.mounted) {
+          ScaffoldMessenger.of(context).showSnackBar(
+            SnackBar(content: Text('Error loading tournament: $e')),
+          );
+        }
+      }
+    }
   }
 
   @override
