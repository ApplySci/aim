Seating for mahjong tournaments with 16-172 players (with some gaps above 116). For any given number of players, a seating arrangement has been generated for the widest range of hanchans possible without repeat meetups between players (2-29 hanchan in the most flexible case, with 172 players).

The seating allocation is designed to: minimize repeat meetups between players, and repeat visits to tables; balance wind allocations; and maximise the number of indirect meets between any pair of players, via a third player.

Created by Andrew ZP Smith (ZAPS) https://github.com/ApplySci/aim/

Each .py file contains all the seating for a specific number of hanchan. e.g. seats_8.py contains all the seating for mahjong tournaments with 8 hanchan, with 16-172 players.

In each file, each key/value pair the "seats" dict is structured as:
player_count: seating list. Each seating list is a list of hanchan. Each hanchan is a list of tables. Each table is a list of players, indexed 1-16, in wind order.

The docstring for each .py file lists how many non-optimal occurrences happened, for each number of players.

Original SGP solves from Alice Miller:
"Breakout Group Allocation Schedules and the Social Golfer Problem with Adjacent Group Sizes", by Alice Miller, Matthew Barr, William Kavanagh, Ivaylo Valkov and Helen C. Purchase. DOI:10.3390/sym13010013 , Symmetry, December 2020

Additional mahjong-specific criteria devised & originally implemented by Martin Lester:
"Scheduling Reach Mahjong Tournaments Using Pseudoboolean Constraints" by Martin Mariusz Lester. DOI:10.1007/978-3-030-80223-3_24 , Theory and Applications of Satisfiability Testing : SAT 2021 Lecture Notes in Computer Science, 2021, p. 349-358

My apologies to all for taking their beautiful combinatorial approaches and building a mess of brute force optimisations on top of them.