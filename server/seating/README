
Seating for mahjong tournaments with 16-172 players. For any given number of players, a seating arrangement has been generated for up to 15 hanchan without repeat meetups between players.

The seating allocation is designed to: minimize repeat meetups between players, & repeat visits to tables; balance wind allocations; and maximise the number of indirect meets between any pair of players via a third player.


Each .py file contains all the seating for a specific number of hanchan. e.g. seats_8.py contains all the seating for mahjong tournaments with 8 hanchan, with 16-172 players.

Variable "seats" is dict of seating arrangements. 
Each key is the number of players. 
The corresponding dict value is a list of hanchan. 
Each hanchan is a list of tables. 
Each table is a list of players, indexed from 1 upwards, in wind order (ESWN).


For Python Users

1. Import the seats dictionary from the appropriate file:
from seats_13 import seats
# Get seating for 60 players, 13 hanchan
seating = seats[60]
# Access a specific hanchan (e.g., the first one)
first_hanchan = seating[0]
# Access a specific table in a hanchan (e.g., the third table in the second hanchan)
table = seating[1][2]
print(f"Players at this table: East={table[0]}, South={table[1]}, West={table[2]}, North={table[3]}")


The docstring for each .py file lists how many non-optimal occurrences happened, for each number of players:
Winds: counts players who sit in any wind position too rarely or too often
Tables: counts players who visit the same table more often than strictly necessary.
Direct MeetS: counts pairs of players who meet more than once across all hanchan.
Indirect Meets: counts pairs of players who never play each other, and for whom there are too few other players who they each play.

Original SGP solutions from Alice Miller et al: http://breakoutroom.pythonanywhere.com/allocate/
"Breakout Group Allocation Schedules and the Social Golfer Problem with Adjacent Group Sizes", by Alice Miller, Matthew Barr, William Kavanagh, Ivaylo Valkov and Helen C. Purchase. DOI:10.3390/sym13010013 , Symmetry, December 2020

Using additional mahjong-specific criteria devised & originally implemented by Martin Lester:
"Scheduling Reach Mahjong Tournaments Using Pseudoboolean Constraints" by Martin Mariusz Lester. DOI:10.1007/978-3-030-80223-3_24 , Theory and Applications of Satisfiability Testing : SAT 2021 Lecture Notes in Computer Science, 2021, p. 349-358

My apologies to all for taking their beautiful combinatorial approaches and building a mess of brute force on top of them.


Detailed Statistics Files

The `statall.py` script generates detailed statistics files in the `stats/` directory. These files provide insights into the seating arrangements and highlight any non-optimal occurrences.


Criteria for Warnings

Winds:
Each player is expected to sit in each wind position a quarter of the time. Warnings are generated for each wind where a player is above or below that. e.g. for 11 hanchan, warnings are generated for any wind where a player sits 0 or 1 time; or more than three times.

Tables: 
A warning is generated if the number of times a player visits the same table more than necessary. In almost all cases, that means visiting any table more than once. If there are more hanchan than tables, then it means visiting any table more than twice.

Direct Meets:
Warnings are generated if pairs of players meet more than necessary across all hanchan. In almost all cases, that means meeting more than once. In rare edge cases (eg 16 players 6+ hanchan), it means meeting more than twice.

Indirect Meets:
Warnings are generated if pairs of players never play each other, and there are too few other players who they each play (indirect meets), and there are more than four hanchan. The lowest acceptable number of indirect meets in such cases, is equal to the square root of the number of players. e.g for 36 players, each pair of players must have at least 6 indirect meets.


Created by Andrew ZP Smith (ZAPS) https://github.com/ApplySci/aim/
